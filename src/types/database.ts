export type Json =
  | string
  | number
  | boolean
  | null
  | { [key: string]: Json | undefined }
  | Json[];

// Matches Supabase's generated structure so you can use createBrowserClient<Database>
export interface Database {
  public: {
    Tables: {
      images: {
        Row: {
          id: string;
          bucket: string;
          storage_path: string;
          alt: string;
          title: string | null;
          caption: string | null;
          width: number | null;
          height: number | null;
          /** generated column */
          orientation: "landscape" | "portrait" | "square" | null;
          taken_at: string | null; // timestamptz -> ISO string
          created_at: string; // timestamptz -> ISO string
          published: boolean;
          position: number | null;
          blurhash: string | null;
          exif: Json | null;
          colors: Json | null;
        };
        Insert: {
          id?: string;
          bucket?: string; // defaults to 'gallery'
          storage_path: string;
          alt: string;
          title?: string | null;
          caption?: string | null;
          width?: number | null;
          height?: number | null;
          /** generated by DB; you generally shouldn't set this */
          orientation?: "landscape" | "portrait" | "square" | null;
          taken_at?: string | null;
          created_at?: string;
          published?: boolean; // default true
          position?: number | null;
          blurhash?: string | null;
          exif?: Json | null;
          colors?: Json | null;
        };
        Update: {
          id?: string;
          bucket?: string;
          storage_path?: string;
          alt?: string;
          title?: string | null;
          caption?: string | null;
          width?: number | null;
          height?: number | null;
          /** generated by DB */
          orientation?: "landscape" | "portrait" | "square" | null;
          taken_at?: string | null;
          created_at?: string;
          published?: boolean;
          position?: number | null;
          blurhash?: string | null;
          exif?: Json | null;
          colors?: Json | null;
        };
        Relationships: [];
      };

      tags: {
        Row: {
          id: string;
          slug: string;
          label: string;
        };
        Insert: {
          id?: string;
          slug: string;
          label: string;
        };
        Update: {
          id?: string;
          slug?: string;
          label?: string;
        };
        Relationships: [];
      };

      image_tags: {
        Row: {
          image_id: string;
          tag_id: string;
        };
        Insert: {
          image_id: string;
          tag_id: string;
        };
        Update: {
          image_id?: string;
          tag_id?: string;
        };
        Relationships: [
          {
            foreignKeyName: "image_tags_image_id_fkey";
            columns: ["image_id"];
            isOneToOne: false;
            referencedRelation: "images";
            referencedColumns: ["id"];
          },
          {
            foreignKeyName: "image_tags_tag_id_fkey";
            columns: ["tag_id"];
            isOneToOne: false;
            referencedRelation: "tags";
            referencedColumns: ["id"];
          }
        ];
      };
    };
    Views: {
      [_ in never]: never;
    };
    Functions: {
      image_ids_with_all_tags: {
        Args: { slugs: string[] };
        Returns: { id: string }[];
      };
      // add more functions here as needed
    };
    Enums: {
      [_ in never]: never;
    };
    CompositeTypes: {
      [_ in never]: never;
    };
  };
}

/** Convenience helpers (same shape as Supabase codegen) */
export type Tables<T extends keyof Database["public"]["Tables"]> =
  Database["public"]["Tables"][T]["Row"];

export type TablesInsert<T extends keyof Database["public"]["Tables"]> =
  Database["public"]["Tables"][T]["Insert"];

export type TablesUpdate<T extends keyof Database["public"]["Tables"]> =
  Database["public"]["Tables"][T]["Update"];

export type Enums<T extends keyof Database["public"]["Enums"]> =
  Database["public"]["Enums"][T];

// RPC helpers
export type FunctionArgs<N extends keyof Database["public"]["Functions"]> =
  Database["public"]["Functions"][N] extends { Args: infer A } ? A : never;
export type FunctionReturn<N extends keyof Database["public"]["Functions"]> =
  Database["public"]["Functions"][N] extends { Returns: infer R } ? R : never;
